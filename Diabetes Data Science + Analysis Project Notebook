{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2e7eaaaa",
   "metadata": {
    "papermill": {
     "duration": 0.009676,
     "end_time": "2025-08-09T05:28:02.723202",
     "exception": false,
     "start_time": "2025-08-09T05:28:02.713526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Diabetes Data Science and Analysis Project\n",
    "(Rough Draft Phase)\n",
    "\n",
    "By: Angela Cao\n",
    "\n",
    "## Overview \n",
    "The construction of diabetes dataset was explained. The data were collected from the Iraqi society, as they data were acquired from the laboratory of Medical City Hospital and (the Specializes Center for Endocrinology and Diabetes-Al-Kindy Teaching Hospital). Patients' files were taken and data extracted from them and entered in to the database to construct the diabetes dataset. The data consist of medical information, laboratory analysis. \n",
    "\n",
    "The data consist of medical information, laboratory analysisâ€¦ etc. The data that have been entered initially into the system are: No. of Patient, Sugar Level Blood, Age, Gender, Creatinine ratio(Cr), Body Mass Index (BMI), Urea, Cholesterol (Chol), Fasting lipid profile, including total, LDL, VLDL, Triglycerides(TG) and HDL Cholesterol , HBA1C, Class (the patient's diabetes disease class may be Diabetic, Non-Diabetic, or Predict-Diabetic).\n",
    "\n",
    "**Source**: Mendeley Data (https://data.mendeley.com/datasets/wj9rwkp9c2/1)\n",
    "\n",
    "## Project Questions\n",
    "* What are the most important factors behind development of diabetes?\n",
    "* Does gender and/or age have significant influence behind development of diabetes? \n",
    "\n",
    "## Objectives\n",
    "* Develop a high-performing machine learning model that can predict stage of diabetes\n",
    "* Determine most important factors behind development of diabetes\n",
    "* Develop a dashboard to illustrate results, diabetes prediction, and statistical analysis (outside of Kaggle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c06ae634",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:02.742313Z",
     "iopub.status.busy": "2025-08-09T05:28:02.741363Z",
     "iopub.status.idle": "2025-08-09T05:28:06.344869Z",
     "shell.execute_reply": "2025-08-09T05:28:06.343806Z"
    },
    "papermill": {
     "duration": 3.61466,
     "end_time": "2025-08-09T05:28:06.346562",
     "exception": false,
     "start_time": "2025-08-09T05:28:02.731902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/multiclass-diabetes-dataset/Multiclass Diabetes Dataset/Multiclass Diabetes Dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2fc486f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:06.366355Z",
     "iopub.status.busy": "2025-08-09T05:28:06.365937Z",
     "iopub.status.idle": "2025-08-09T05:28:06.417653Z",
     "shell.execute_reply": "2025-08-09T05:28:06.416744Z"
    },
    "papermill": {
     "duration": 0.063515,
     "end_time": "2025-08-09T05:28:06.419117",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.355602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>2.3</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>36.6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>35.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  AGE  Urea   Cr  HbA1c  Chol   TG  HDL  LDL  VLDL   BMI  Class\n",
       "0         0   50   4.7   46    4.9   4.2  0.9  2.4  1.4   0.5  24.0      0\n",
       "1         1   26   4.5   62    4.9   3.7  1.4  1.1  2.1   0.6  23.0      0\n",
       "2         1   33   7.1   46    4.9   4.9  1.0  0.8  2.0   0.4  21.0      0\n",
       "3         0   45   2.3   24    4.0   2.9  1.0  1.0  1.5   0.4  21.0      0\n",
       "4         0   50   2.0   50    4.0   3.6  1.3  0.9  2.1   0.6  24.0      0\n",
       "..      ...  ...   ...  ...    ...   ...  ...  ...  ...   ...   ...    ...\n",
       "259       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  30.0      2\n",
       "260       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  36.6      2\n",
       "261       1   60  20.8  800    9.0   2.3  1.1  0.9  0.9   0.5  33.0      2\n",
       "262       1   56  20.8  800    9.0   4.6  2.0  1.2  2.5   0.9  35.0      2\n",
       "263       1   58  20.8  800    9.1   6.6  2.9  1.1  4.3   1.3  33.0      2\n",
       "\n",
       "[264 rows x 12 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/multiclass-diabetes-dataset/Multiclass Diabetes Dataset/Multiclass Diabetes Dataset.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58112068",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:06.438115Z",
     "iopub.status.busy": "2025-08-09T05:28:06.437802Z",
     "iopub.status.idle": "2025-08-09T05:28:06.444663Z",
     "shell.execute_reply": "2025-08-09T05:28:06.443926Z"
    },
    "papermill": {
     "duration": 0.018027,
     "end_time": "2025-08-09T05:28:06.446090",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.428063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Gender', 'AGE', 'Urea', 'Cr', 'HbA1c', 'Chol', 'TG', 'HDL', 'LDL',\n",
       "       'VLDL', 'BMI', 'Class'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "84523517",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:06.466233Z",
     "iopub.status.busy": "2025-08-09T05:28:06.465914Z",
     "iopub.status.idle": "2025-08-09T05:28:06.476865Z",
     "shell.execute_reply": "2025-08-09T05:28:06.476151Z"
    },
    "papermill": {
     "duration": 0.022711,
     "end_time": "2025-08-09T05:28:06.478200",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.455489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Class\n",
       "2    128\n",
       "0     96\n",
       "1     40\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fd25f3e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:06.497049Z",
     "iopub.status.busy": "2025-08-09T05:28:06.496773Z",
     "iopub.status.idle": "2025-08-09T05:28:06.504390Z",
     "shell.execute_reply": "2025-08-09T05:28:06.503668Z"
    },
    "papermill": {
     "duration": 0.018419,
     "end_time": "2025-08-09T05:28:06.505609",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.487190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender    False\n",
       "AGE       False\n",
       "Urea      False\n",
       "Cr        False\n",
       "HbA1c     False\n",
       "Chol      False\n",
       "TG        False\n",
       "HDL       False\n",
       "LDL       False\n",
       "VLDL      False\n",
       "BMI       False\n",
       "Class     False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7454b5bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:06.524831Z",
     "iopub.status.busy": "2025-08-09T05:28:06.524487Z",
     "iopub.status.idle": "2025-08-09T05:28:06.834992Z",
     "shell.execute_reply": "2025-08-09T05:28:06.834053Z"
    },
    "papermill": {
     "duration": 0.321904,
     "end_time": "2025-08-09T05:28:06.836488",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.514584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Gender', ylabel='Class'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gender = df.groupby(['Gender']).count()['Class']\n",
    "gender = gender.to_frame()\n",
    "gender = gender.reset_index()\n",
    "sns.barplot(gender, x='Gender', y='Class')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fb68ace3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:06.856867Z",
     "iopub.status.busy": "2025-08-09T05:28:06.856319Z",
     "iopub.status.idle": "2025-08-09T05:28:06.982124Z",
     "shell.execute_reply": "2025-08-09T05:28:06.981313Z"
    },
    "papermill": {
     "duration": 0.13738,
     "end_time": "2025-08-09T05:28:06.983556",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.846176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Gender', ylabel='Class'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "non_diabetic = df[df['Class'] == 0]\n",
    "non_diabetic_gender = non_diabetic.groupby(['Gender']).count()['Class']\n",
    "non_diabetic_gender = non_diabetic_gender.to_frame()\n",
    "non_diabetic_gender = non_diabetic_gender.reset_index()\n",
    "sns.barplot(non_diabetic_gender, x='Gender', y='Class')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7b4fcd6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.006571Z",
     "iopub.status.busy": "2025-08-09T05:28:07.005728Z",
     "iopub.status.idle": "2025-08-09T05:28:07.131838Z",
     "shell.execute_reply": "2025-08-09T05:28:07.130928Z"
    },
    "papermill": {
     "duration": 0.139922,
     "end_time": "2025-08-09T05:28:07.133406",
     "exception": false,
     "start_time": "2025-08-09T05:28:06.993484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Gender', ylabel='Class'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "diabetic = df[df['Class'] == 1]\n",
    "diabetic_gender = diabetic.groupby(['Gender']).count()['Class']\n",
    "diabetic_gender = diabetic_gender.to_frame()\n",
    "diabetic_gender = diabetic_gender.reset_index()\n",
    "sns.barplot(diabetic_gender, x='Gender', y='Class')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bed7ca02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.155145Z",
     "iopub.status.busy": "2025-08-09T05:28:07.154821Z",
     "iopub.status.idle": "2025-08-09T05:28:07.292075Z",
     "shell.execute_reply": "2025-08-09T05:28:07.291168Z"
    },
    "papermill": {
     "duration": 0.149986,
     "end_time": "2025-08-09T05:28:07.293524",
     "exception": false,
     "start_time": "2025-08-09T05:28:07.143538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Gender', ylabel='Class'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pre_diabetic = df[df['Class'] == 2]\n",
    "pre_diabetic_gender = pre_diabetic.groupby(['Gender']).count()['Class']\n",
    "pre_diabetic_gender = pre_diabetic_gender.to_frame()\n",
    "pre_diabetic_gender = pre_diabetic_gender.reset_index()\n",
    "sns.barplot(pre_diabetic_gender, x='Gender', y='Class')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "31697a32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.315841Z",
     "iopub.status.busy": "2025-08-09T05:28:07.315470Z",
     "iopub.status.idle": "2025-08-09T05:28:07.425225Z",
     "shell.execute_reply": "2025-08-09T05:28:07.424373Z"
    },
    "papermill": {
     "duration": 0.122739,
     "end_time": "2025-08-09T05:28:07.426770",
     "exception": false,
     "start_time": "2025-08-09T05:28:07.304031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='AGE'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAggAAAGwCAYAAADMjZ3mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAT/0lEQVR4nO3df2zUd/3A8dd1hWv5Vep+8EN+iA7B6eALI2kQl+lAXbOYBZeFr4Fky9gfUxJxarJpHOiMg7gs6mJk/qjbzAhzM2G6LThRIzpDYEUZ+KswJY7IYP+sa7esZew+3z++2X2pr/GVFdpr6eORXHLc5+76ujcf7p793NGWiqIoAgDgJHW1HgAAGHoEAgCQCAQAIBEIAEAiEACARCAAAIlAAACS+v7esFKpxJEjR2L8+PFRKpXO5kwAwAApiiK6u7tj6tSpUVd36uME/Q6EI0eOxPTp0/t7cwCghg4fPhzTpk075fZ+B8L48eOrX2DChAn9vRsAYBB1dXXF9OnTq6/jp9LvQHjjbYUJEyYIBAAYZv7TxwN8SBEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAk9bUeAGqlKIro6emp9RiDqiiK6O3tjYiIcrkcpVKpxhO9dQ0NDcNybhhuBAIjVk9PT7S2ttZ6DN6ibdu2RWNjY63HgHOetxgAgMQRBIiIl//rE1HUjYB/Dq+/FuOfeSgiIrrn/3fEeaNqPNDpKVVOxLi9W2o9BowoI+AZEf6zoq5+2LxYnjXnjRo2j7mo9QAwAnmLAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgKS+1gOcrCiK6OnpiYiIhoaGKJVKNZ4IgJHCa1BfQ+oIQk9PT7S2tkZra2v1LwkABoPXoL6GVCAAAEODQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEABhi2tra4sorr4y2traazSAQAGAI6ezsjM2bN0elUonNmzdHZ2dnTeYQCAAwhNx+++1RqVQiIqJSqcS6detqMkd9Tb7qKRRFUT3f09NTw0kYCfrsYyftewxBnhsYBCfvW0WNnhPa29tj//79fS7bt29ftLe3x6JFiwZ1ltMOhN7e3ujt7a3+uaur66wPc/L9L1++/KzfP5xS5UREjK71FJxK5UT1rOcGBkNvb2+MGTNmUL9mpVKJO+6440233XHHHfHoo49GXd3gHfg/7a+0YcOGaGpqqp6mT58+kHMBwIiya9euU37z3dXVFbt27RrUeU77CMIXvvCF+OxnP1v9c1dX11mPhHK5XD2/devWaGhoOKv3Dyfr6en5v+9G64bUu238u5P+fjw3MFBOfk44+fVosLS0tMSECRPeNBKampqipaVlUOc57WfFcrk84AtWKpWq5xsaGqKxsXFAvx5UnbTvMQR5bmCQlWrwnFBXVxfr1q2Lz3/+82nb+vXrB/XthQj/iwEAhoxFixbFpZde2ueyefPmxcKFCwd9FoEAAEPIV7/61erRgrq6ulN+cHGgCQQAGEImTpwYK1eujLq6uli5cmVMnDixJnP4ZBYADDGrV6+O1atX13QGRxAAgEQgAACJQAAAEoEA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sXDhwhg7dmw0NTXF/Pnz40tf+lIcOXKker0bbrghSqVSOl111VWD+VCAAeZHLcMIctNNN8W4ceOira0tOjo6YurUqRER0dvbGx/5yEdi37598ZWvfCWWLFkSF154YRw6dCi2bNkSzc3NsWHDhoj430A4duxY3HfffX3uu1wuR3Nz86A/JmBg1Nd6AGBwvPzyy/HjH/842tvb4+jRo3H//ffHF7/4xYiI+MY3vhFPPfVUtLe3x4IFC6q3mTFjRlxxxRXx799HlMvlmDx58qDODwwubzHACPHwww/H3LlzY86cObFq1ar44Q9/WH3h37JlS3z4wx/uEwcnK5VKgzkqMAQIBBgh2traYtWqVRERcdVVV8VLL70UO3bsiIiIAwcOxJw5c/pcf/ny5TFu3LgYN25cvP/97++z7fHHH69ue+N05513Ds4DAQaFtxhgBOjo6Ijdu3fH1q1bIyKivr4+VqxYEW1tbfHBD37wTW/zne98J1555ZW455574re//W2fbR/60Idi06ZNfS5729veNiCzA7UhEGAEaGtrixMnTlQ/lBgRURRFlMvl+Pa3vx2zZ8+Ojo6OPreZMmVKRLz5C//YsWPj4osvHtihgZryFgOc406cOBE/+tGP4u677469e/dWT88880xMnTo1tmzZEp/4xCdi+/bt8cc//rHW4wJDhCMIcI57/PHH48UXX4zVq1dHU1NTn23XXntttLW1xe9+97t44oknYunSpbF+/fq4/PLLo7m5OQ4cOBDbtm2L8847r8/tent74+jRo30uq6+vjwsuuGDAHw8wOPwcBDjHfexjH4tKpRJPPPFE2rZ79+5oaWmJZ555JubMmRPf/OY3Y8uWLXHgwIGoVCoxa9asaG1tjVtuuSWmT58eEf/7cxAeeOCBdF9z5syJv/3tbwP+eIDBIRAAgMRnEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAACS/wHhWXtLfrisjAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['AGE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59a59c0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.449809Z",
     "iopub.status.busy": "2025-08-09T05:28:07.449432Z",
     "iopub.status.idle": "2025-08-09T05:28:07.588238Z",
     "shell.execute_reply": "2025-08-09T05:28:07.587323Z"
    },
    "papermill": {
     "duration": 0.152017,
     "end_time": "2025-08-09T05:28:07.589787",
     "exception": false,
     "start_time": "2025-08-09T05:28:07.437770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['AGE'])\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5cb0224c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.613440Z",
     "iopub.status.busy": "2025-08-09T05:28:07.612585Z",
     "iopub.status.idle": "2025-08-09T05:28:07.723079Z",
     "shell.execute_reply": "2025-08-09T05:28:07.722179Z"
    },
    "papermill": {
     "duration": 0.123705,
     "end_time": "2025-08-09T05:28:07.724453",
     "exception": false,
     "start_time": "2025-08-09T05:28:07.600748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Urea'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['Urea'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "410ec338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.749501Z",
     "iopub.status.busy": "2025-08-09T05:28:07.749162Z",
     "iopub.status.idle": "2025-08-09T05:28:07.881532Z",
     "shell.execute_reply": "2025-08-09T05:28:07.880642Z"
    },
    "papermill": {
     "duration": 0.147214,
     "end_time": "2025-08-09T05:28:07.882983",
     "exception": false,
     "start_time": "2025-08-09T05:28:07.735769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['Urea'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c19c9a76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:07.906874Z",
     "iopub.status.busy": "2025-08-09T05:28:07.906534Z",
     "iopub.status.idle": "2025-08-09T05:28:08.032932Z",
     "shell.execute_reply": "2025-08-09T05:28:08.032041Z"
    },
    "papermill": {
     "duration": 0.140026,
     "end_time": "2025-08-09T05:28:08.034446",
     "exception": false,
     "start_time": "2025-08-09T05:28:07.894420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Cr'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['Cr'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "360ba7f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:08.125803Z",
     "iopub.status.busy": "2025-08-09T05:28:08.125138Z",
     "iopub.status.idle": "2025-08-09T05:28:08.276241Z",
     "shell.execute_reply": "2025-08-09T05:28:08.275419Z"
    },
    "papermill": {
     "duration": 0.16521,
     "end_time": "2025-08-09T05:28:08.277762",
     "exception": false,
     "start_time": "2025-08-09T05:28:08.112552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['Cr'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ed79081c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:08.303143Z",
     "iopub.status.busy": "2025-08-09T05:28:08.302819Z",
     "iopub.status.idle": "2025-08-09T05:28:08.421503Z",
     "shell.execute_reply": "2025-08-09T05:28:08.420573Z"
    },
    "papermill": {
     "duration": 0.133185,
     "end_time": "2025-08-09T05:28:08.423051",
     "exception": false,
     "start_time": "2025-08-09T05:28:08.289866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='HbA1c'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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bKjOUCXobj9s2rSpOPzww4tnn322OOKII4pf/vKXVZ+tLziC0EPvvPNORESMHDmy5EnKMX/+/Dj11FPj5JNPLnuUUtx7771x7LHHxre//e049NBDY8qUKfG73/2u7LGqburUqfHAAw/E888/HxERTz/9dDz88MMxc+bMkicrz8svvxyvvfZal++NESNGxAknnBCPPfZYiZOV65133olKpRIHHXRQ2aNUVUdHR8ydOzcuvvjimDRpUtnj7JFe/7Gm/UlHR0csXLgwpk2bFkcffXTZ41TdXXfdFU1NTbFu3bqyRynNSy+9FDfeeGMsXrw4Lr300li3bl1ceOGFMXTo0Jg3b17Z41XNJZdcEi0tLTFx4sQYPHhwtLe3x2WXXRZnn3122aOV5rXXXouIiNGjR3e5fvTo0Z237W9aW1tjyZIlcdZZZw34P1rU16666qqoqamJCy+8sOxR9phA6IH58+fHs88+Gw8//HDZo1Tdxo0bY8GCBbF69eqoq6sre5zSdHR0xLHHHhuXX355RERMmTIlnn322bjpppv2q0D485//HHfccUcsX748Jk2aFM3NzbFw4cJobGzcr/YD3du2bVucccYZURRF3HjjjWWPU1VPPfVUXHfdddHU1BSVSqXscfaYlxh24Qc/+EHcf//9sWbNmv3uz1tHbL/Dv/HGG/G5z30uampqoqamJh566KG4/vrro6amJtrb28sesSoOO+yw+PSnP93luqOOOipeeeWVkiYqx8UXXxyXXHJJzJo1KyZPnhxz586NRYsWxRVXXFH2aKUZM2ZMRES8/vrrXa5//fXXO2/bX3wQBxs2bIjVq1fvd0cP/vGPf8Qbb7wR48eP73y83LBhQ1x00UXxsY99rOzxdpsjCN0oiiIuuOCCWLFiRTz44IMxYcKEskcqxfTp0+OZZ57pct15550XEydOjCVLlsTgwYNLmqy6pk2bln7N9fnnn48jjjiipInKsXXr1hg0qOvPFYMHD46Ojo6SJirfhAkTYsyYMfHAAw/EZz/72YiIaGlpibVr18b3vve9coerog/i4IUXXog1a9bEqFGjyh6p6ubOnZvO05oxY0bMnTs3zjvvvJKm6j2B0I358+fH8uXL4y9/+Us0NDR0vpY4YsSIqK+vL3m66mloaEjnXQwbNixGjRq1X52PsWjRopg6dWpcfvnlccYZZ8QTTzwRy5Yti2XLlpU9WlWddtppcdlll8X48eNj0qRJ8c9//jOuvfbaOP/888serV+9++678eKLL3Zefvnll6O5uTlGjhwZ48ePj4ULF8bPf/7zOPLII2PChAmxdOnSaGxsjNNPP728ofvYR+2Dww47LL71rW9FU1NT3H///dHe3t75mDly5MgYOnRoWWP3uV3dFz4cRkOGDIkxY8bEpz71qWqPuufK/jWKgSoidvp2yy23lD1a6fbHX3MsiqK47777iqOPPrqora0tJk6cWCxbtqzskaqupaWlWLBgQTF+/Piirq6u+PjHP1786Ec/Ktra2soerV+tWbNmp48H8+bNK4pi+686Ll26tBg9enRRW1tbTJ8+vVi/fn25Q/exj9oHL7/8crePmWvWrCl79D61q/vCh+3Nv+bozz0DAImTFAGARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEGA/ceutt8ZBBx1U9hjAXkIgwD7g3HPP3en/+//ggw9GpVKJt99+e7fW+9///hcjR46MQw45JNra2tLty5Ytiy996UsxfPjwXq0PDHwCAUjuvvvumDRpUkycODFWrlyZbt+6dWt89atfjUsvvbT6wwFVIRBgP7Ny5co48sgjo66uLmbMmBEbN25MH3PzzTfHnDlzYs6cOXHzzTen2xcuXBiXXHJJnHjiid1uZ9OmTXHWWWfFyJEjY9iwYXHsscfG2rVr+/RrAfqPP/cM+5GtW7fGZZddFrfffnsMHTo0vv/978esWbPikUce6fyYf//73/HYY4/FPffcE0VRxKJFi2LDhg1xxBFH9Hg77777bpx00klx+OGHx7333htjxoyJpqam6Ojo6I8vC+gHAgH2Effff38ceOCBXa5rb2/vcnnbtm1xww03xAknnBAREbfddlscddRR8cQTT8Txxx8fERF/+MMfYubMmXHwwQdHRMSMGTPilltuiZ/+9Kc9nmX58uXx5ptvxrp162LkyJEREfHJT36yt18aUAIvMcA+4stf/nI0Nzd3efv973/f5WNqamriuOOO67w8ceLEOOigg+K5556LiO1Bcdttt8WcOXM6P2bOnDlx66237tZP/83NzTFlypTOOAD2Po4gwD5i2LBh6af0TZs27dYaf/3rX+PVV1+NM888s8v17e3t8cADD8RXvvKVHq1TX1+/W9sFBh5HEGA/8v7778eTTz7ZeXn9+vXx9ttvx1FHHRUR209OnDVrVjoSMWvWrJ2erNidY445Jpqbm+M///lPn38NQHUIBNiPDBkyJC644IJYu3ZtPPXUU3HuuefGiSeeGMcff3y8+eabcd9998W8efPi6KOP7vJ2zjnnxMqVKzuf8F977bVobm6OF198MSIinnnmmS5BcNZZZ8WYMWPi9NNPj0ceeSReeumluPvuu+Oxxx4r7WsHdo9AgP3IAQccEEuWLInZs2fHtGnT4sADD4w//elPERFx++23x7Bhw2L69Onp86ZPnx719fXxxz/+MSIibrrpppgyZUp85zvfiYiIL37xizFlypS49957IyJi6NCh8be//S0OPfTQ+NrXvhaTJ0+OK6+8MgYPHlylrxTYU5WiKIqyhwAABhZHEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAACS/wPJ4aFbvCZRHQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['HbA1c'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "23904b07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:08.450217Z",
     "iopub.status.busy": "2025-08-09T05:28:08.449255Z",
     "iopub.status.idle": "2025-08-09T05:28:08.591298Z",
     "shell.execute_reply": "2025-08-09T05:28:08.590352Z"
    },
    "papermill": {
     "duration": 0.15728,
     "end_time": "2025-08-09T05:28:08.592674",
     "exception": false,
     "start_time": "2025-08-09T05:28:08.435394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['HbA1c'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "44eacfb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:08.619168Z",
     "iopub.status.busy": "2025-08-09T05:28:08.618855Z",
     "iopub.status.idle": "2025-08-09T05:28:08.727705Z",
     "shell.execute_reply": "2025-08-09T05:28:08.726800Z"
    },
    "papermill": {
     "duration": 0.123729,
     "end_time": "2025-08-09T05:28:08.729122",
     "exception": false,
     "start_time": "2025-08-09T05:28:08.605393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Chol'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['Chol'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "80ac21d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:08.755379Z",
     "iopub.status.busy": "2025-08-09T05:28:08.755105Z",
     "iopub.status.idle": "2025-08-09T05:28:08.883181Z",
     "shell.execute_reply": "2025-08-09T05:28:08.882204Z"
    },
    "papermill": {
     "duration": 0.142997,
     "end_time": "2025-08-09T05:28:08.884644",
     "exception": false,
     "start_time": "2025-08-09T05:28:08.741647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAGdCAYAAAA44ojeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAbBUlEQVR4nO3df6zV9X3H8dcF5HJHuReh4V5uhHLXmOCv+gOUIqbb6k1Zx4ykpB0JTZg1smwXK96tDrqCcVWvkNUSFKEYh20ms20WbdWUxFwTmCu/hNrU1aJLbWU199LGcq/ScGXcsz+63uyqq7U7t+dz4fFIvon38/3e733fE+J55nu/55y6SqVSCQBAQcbUegAAgDcTKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRnXK0H+G0MDg7mlVdeyaRJk1JXV1frcQCA30ClUslrr72W1tbWjBnz66+RjMpAeeWVVzJjxoxajwEA/BaOHDmSc84559ceMyoDZdKkSUl++Qs2NjbWeBoA4DfR39+fGTNmDD2P/zqjMlB+9WedxsZGgQIAo8xvcnuGm2QBgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAozrsOlN27d+eaa65Ja2tr6urq8uijjw7bX6lUsm7dukyfPj0NDQ1pb2/Piy++OOyYV199NcuWLUtjY2MmT56c66+/Pq+//vr/6xcBAE4f7zpQjh8/nosvvjibN29+2/0bNmzIpk2bsnXr1uzbty8TJ07MwoULc+LEiaFjli1bln//93/Pk08+mccffzy7d+/OihUrfvvfAgA4rdRVKpXKb/3NdXV55JFHsnjx4iS/vHrS2tqav/7rv87f/M3fJEn6+vrS3NycBx98MEuXLs3zzz+f888/PwcOHMjcuXOTJDt37syf/Mmf5D//8z/T2tr6jj+3v78/TU1N6evr806yADBKvJvn76reg/LSSy+lp6cn7e3tQ2tNTU2ZN29e9uzZkyTZs2dPJk+ePBQnSdLe3p4xY8Zk3759b3vegYGB9Pf3D9sAgNNXVQOlp6cnSdLc3Dxsvbm5eWhfT09Ppk2bNmz/uHHjMmXKlKFj3qyrqytNTU1Dm08yBoDT26h4Fc+aNWvS19c3tB05cqTWIwEAI6iqgdLS0pIk6e3tHbbe29s7tK+lpSVHjx4dtv+//uu/8uqrrw4d82b19fVDn1zsE4wB4PQ3rpona2trS0tLS7q7u3PJJZck+eUNMfv27ctf/uVfJknmz5+fY8eO5eDBg5kzZ06S5Kmnnsrg4GDmzZtXzXGAJLNWP1HrEd61H921qNYjADX2rgPl9ddfz3/8x38Mff3SSy/l2WefzZQpUzJz5sysWrUqt99+e84999y0tbVl7dq1aW1tHXqlz3nnnZc//uM/zg033JCtW7fm5MmTWblyZZYuXfobvYIHADj9vetAeeaZZ/JHf/RHQ193dnYmSZYvX54HH3wwt9xyS44fP54VK1bk2LFjueqqq7Jz585MmDBh6HseeuihrFy5MldffXXGjBmTJUuWZNOmTVX4dQCA08H/631QasX7oMBvzp94gFLU7H1QAACqQaAAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUJyqB8qpU6eydu3atLW1paGhIe9///vz+c9/PpVKZeiYSqWSdevWZfr06WloaEh7e3tefPHFao8CAIxSVQ+U9evXZ8uWLbn33nvz/PPPZ/369dmwYUPuueeeoWM2bNiQTZs2ZevWrdm3b18mTpyYhQsX5sSJE9UeBwAYhcZV+4Tf/va3c+2112bRokVJklmzZuWf//mfs3///iS/vHqycePGfO5zn8u1116bJPnKV76S5ubmPProo1m6dGm1RwIARpmqX0G58sor093dnRdeeCFJ8t3vfjdPP/10PvrRjyZJXnrppfT09KS9vX3oe5qamjJv3rzs2bPnbc85MDCQ/v7+YRsAcPqq+hWU1atXp7+/P7Nnz87YsWNz6tSp3HHHHVm2bFmSpKenJ0nS3Nw87Puam5uH9r1ZV1dXbrvttmqPCgAUqupXUL72ta/loYceyo4dO3Lo0KF8+ctfzj/8wz/ky1/+8m99zjVr1qSvr29oO3LkSBUnBgBKU/UrKJ/5zGeyevXqoXtJLrroovz4xz9OV1dXli9fnpaWliRJb29vpk+fPvR9vb29ueSSS972nPX19amvr6/2qABAoap+BeUXv/hFxowZftqxY8dmcHAwSdLW1paWlpZ0d3cP7e/v78++ffsyf/78ao8DAIxCVb+Ccs011+SOO+7IzJkzc8EFF+Q73/lO7r777nzqU59KktTV1WXVqlW5/fbbc+6556atrS1r165Na2trFi9eXO1xAIBRqOqBcs8992Tt2rX5q7/6qxw9ejStra35i7/4i6xbt27omFtuuSXHjx/PihUrcuzYsVx11VXZuXNnJkyYUO1xAIBRqK7yv9/idZTo7+9PU1NT+vr60tjYWOtxoGizVj9R6xHetR/dtajWIwAj4N08f/ssHgCgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOKMSKD85Cc/ySc/+clMnTo1DQ0Nueiii/LMM88M7a9UKlm3bl2mT5+ehoaGtLe358UXXxyJUQCAUajqgfLzn/88CxYsyFlnnZVvfetb+f73v58vfOELOfvss4eO2bBhQzZt2pStW7dm3759mThxYhYuXJgTJ05UexwAYBQaV+0Trl+/PjNmzMj27duH1tra2ob+u1KpZOPGjfnc5z6Xa6+9Nknyla98Jc3NzXn00UezdOnSao8EAIwyVb+C8s1vfjNz587Nxz/+8UybNi2XXnpp7r///qH9L730Unp6etLe3j601tTUlHnz5mXPnj1ve86BgYH09/cP2wCA01fVr6D88Ic/zJYtW9LZ2ZnPfvazOXDgQD796U9n/PjxWb58eXp6epIkzc3Nw76vubl5aN+bdXV15bbbbqv2qEChZq1+otYjvGs/umtRrUeA00rVr6AMDg7msssuy5133plLL700K1asyA033JCtW7f+1udcs2ZN+vr6hrYjR45UcWIAoDRVD5Tp06fn/PPPH7Z23nnn5eWXX06StLS0JEl6e3uHHdPb2zu0783q6+vT2Ng4bAMATl9VD5QFCxbk8OHDw9ZeeOGFvO9970vyyxtmW1pa0t3dPbS/v78/+/bty/z586s9DgAwClX9HpSbb745V155Ze6888584hOfyP79+7Nt27Zs27YtSVJXV5dVq1bl9ttvz7nnnpu2trasXbs2ra2tWbx4cbXHAQBGoaoHyuWXX55HHnkka9asyd///d+nra0tGzduzLJly4aOueWWW3L8+PGsWLEix44dy1VXXZWdO3dmwoQJ1R4HABiF6iqVSqXWQ7xb/f39aWpqSl9fn/tR4B2MxlfEjEZexQPv7N08f/ssHgCgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIozrtYDwGgya/UTtR4B4IzgCgoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcUY8UO66667U1dVl1apVQ2snTpxIR0dHpk6dmve85z1ZsmRJent7R3oUAGCUGNFAOXDgQL70pS/lAx/4wLD1m2++OY899li+/vWvZ9euXXnllVfysY99bCRHAQBGkRELlNdffz3Lli3L/fffn7PPPntova+vLw888EDuvvvufPjDH86cOXOyffv2fPvb387evXtHahwAYBQZsUDp6OjIokWL0t7ePmz94MGDOXny5LD12bNnZ+bMmdmzZ8/bnmtgYCD9/f3DNgDg9DVuJE768MMP59ChQzlw4MBb9vX09GT8+PGZPHnysPXm5ub09PS87fm6urpy2223jcSoAECBqn4F5ciRI7npppvy0EMPZcKECVU555o1a9LX1ze0HTlypCrnBQDKVPVAOXjwYI4ePZrLLrss48aNy7hx47Jr165s2rQp48aNS3Nzc954440cO3Zs2Pf19vampaXlbc9ZX1+fxsbGYRsAcPqq+p94rr766nzve98btnbddddl9uzZ+du//dvMmDEjZ511Vrq7u7NkyZIkyeHDh/Pyyy9n/vz51R4HABiFqh4okyZNyoUXXjhsbeLEiZk6derQ+vXXX5/Ozs5MmTIljY2NufHGGzN//vx88IMfrPY4AMAoNCI3yb6TL37xixkzZkyWLFmSgYGBLFy4MPfdd18tRgEAClRXqVQqtR7i3erv709TU1P6+vrcj8Lv1KzVT9R6BAr1o7sW1XoEKN67ef72WTwAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUJxxtR4A4HQwa/UTtR7hXfvRXYtqPQL8n1xBAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIojUACA4ggUAKA4AgUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAilP1QOnq6srll1+eSZMmZdq0aVm8eHEOHz487JgTJ06ko6MjU6dOzXve854sWbIkvb291R4FABilqh4ou3btSkdHR/bu3Zsnn3wyJ0+ezEc+8pEcP3586Jibb745jz32WL7+9a9n165deeWVV/Kxj32s2qMAAKPUuGqfcOfOncO+fvDBBzNt2rQcPHgwH/rQh9LX15cHHnggO3bsyIc//OEkyfbt23Peeedl7969+eAHP1jtkQCAUWbE70Hp6+tLkkyZMiVJcvDgwZw8eTLt7e1Dx8yePTszZ87Mnj173vYcAwMD6e/vH7YBAKevEQ2UwcHBrFq1KgsWLMiFF16YJOnp6cn48eMzefLkYcc2Nzenp6fnbc/T1dWVpqamoW3GjBkjOTYAUGMjGigdHR157rnn8vDDD/+/zrNmzZr09fUNbUeOHKnShABAiap+D8qvrFy5Mo8//nh2796dc845Z2i9paUlb7zxRo4dOzbsKkpvb29aWlre9lz19fWpr68fqVEBgMJU/QpKpVLJypUr88gjj+Spp55KW1vbsP1z5szJWWedle7u7qG1w4cP5+WXX878+fOrPQ4AMApV/QpKR0dHduzYkW984xuZNGnS0H0lTU1NaWhoSFNTU66//vp0dnZmypQpaWxszI033pj58+d7BQ8AkGQEAmXLli1Jkj/8wz8ctr59+/b8+Z//eZLki1/8YsaMGZMlS5ZkYGAgCxcuzH333VftUQCAUarqgVKpVN7xmAkTJmTz5s3ZvHlztX88AHAa8Fk8AEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxREoAEBxxtV6AM5cs1Y/UesRACiUKygAQHEECgBQHIECABRHoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHF8mjHAGWo0fqL4j+5aVOsR+B1xBQUAKI5AAQCKI1AAgOIIFACgOAIFACiOQAEAiiNQAIDiCBQAoDgCBQAojkABAIrjre4BYASNxo8USGr/sQKuoAAAxREoAEBxBAoAUByBAgAUR6AAAMURKABAcbzM+G2MxpeE1frlYAC/C6Px/8/8dlxBAQCKI1AAgOLUNFA2b96cWbNmZcKECZk3b172799fy3EAgELULFC++tWvprOzM7feemsOHTqUiy++OAsXLszRo0drNRIAUIiaBcrdd9+dG264Idddd13OP//8bN26Nb/3e7+Xf/zHf6zVSABAIWryKp433ngjBw8ezJo1a4bWxowZk/b29uzZs+ctxw8MDGRgYGDo676+viRJf3//iMw3OPCLETnvSBqpx2IkjcbHGeBMMRLPK786Z6VSecdjaxIoP/vZz3Lq1Kk0NzcPW29ubs4PfvCDtxzf1dWV22677S3rM2bMGLEZR5umjbWeAIDTyUg+r7z22mtpamr6tceMivdBWbNmTTo7O4e+HhwczKuvvpqpU6emrq6uqj+rv78/M2bMyJEjR9LY2FjVc/Preexrw+NeOx772vHY10alUslrr72W1tbWdzy2JoHy3ve+N2PHjk1vb++w9d7e3rS0tLzl+Pr6+tTX1w9bmzx58kiOmMbGRv9oa8RjXxse99rx2NeOx/53752unPxKTW6SHT9+fObMmZPu7u6htcHBwXR3d2f+/Pm1GAkAKEjN/sTT2dmZ5cuXZ+7cubniiiuycePGHD9+PNddd12tRgIAClGzQPmzP/uz/PSnP826devS09OTSy65JDt37nzLjbO/a/X19bn11lvf8iclRp7HvjY87rXjsa8dj3356iq/yWt9AAB+h3wWDwBQHIECABRHoAAAxREoAEBxBMr/snnz5syaNSsTJkzIvHnzsn///lqPdNrr6urK5ZdfnkmTJmXatGlZvHhxDh8+XOuxzkh33XVX6urqsmrVqlqPckb4yU9+kk9+8pOZOnVqGhoactFFF+WZZ56p9VinvVOnTmXt2rVpa2tLQ0ND3v/+9+fzn//8b/TZMPxuCZT/8dWvfjWdnZ259dZbc+jQoVx88cVZuHBhjh49WuvRTmu7du1KR0dH9u7dmyeffDInT57MRz7ykRw/frzWo51RDhw4kC996Uv5wAc+UOtRzgg///nPs2DBgpx11ln51re+le9///v5whe+kLPPPrvWo5321q9fny1btuTee+/N888/n/Xr12fDhg255557aj0ab+Jlxv9j3rx5ufzyy3Pvvfcm+eU7286YMSM33nhjVq9eXePpzhw//elPM23atOzatSsf+tCHaj3OGeH111/PZZddlvvuuy+33357LrnkkmzcuLHWY53WVq9enX/7t3/Lv/7rv9Z6lDPOn/7pn6a5uTkPPPDA0NqSJUvS0NCQf/qnf6rhZLyZKyhJ3njjjRw8eDDt7e1Da2PGjEl7e3v27NlTw8nOPH19fUmSKVOm1HiSM0dHR0cWLVo07N8/I+ub3/xm5s6dm49//OOZNm1aLr300tx///21HuuMcOWVV6a7uzsvvPBCkuS73/1unn766Xz0ox+t8WS82aj4NOOR9rOf/SynTp16y7vYNjc35wc/+EGNpjrzDA4OZtWqVVmwYEEuvPDCWo9zRnj44Ydz6NChHDhwoNajnFF++MMfZsuWLens7MxnP/vZHDhwIJ/+9Kczfvz4LF++vNbjndZWr16d/v7+zJ49O2PHjs2pU6dyxx13ZNmyZbUejTcRKBSjo6Mjzz33XJ5++ulaj3JGOHLkSG666aY8+eSTmTBhQq3HOaMMDg5m7ty5ufPOO5Mkl156aZ577rls3bpVoIywr33ta3nooYeyY8eOXHDBBXn22WezatWqtLa2euwLI1CSvPe9783YsWPT29s7bL23tzctLS01murMsnLlyjz++OPZvXt3zjnnnFqPc0Y4ePBgjh49mssuu2xo7dSpU9m9e3fuvffeDAwMZOzYsTWc8PQ1ffr0nH/++cPWzjvvvPzLv/xLjSY6c3zmM5/J6tWrs3Tp0iTJRRddlB//+Mfp6uoSKIVxD0qS8ePHZ86cOenu7h5aGxwcTHd3d+bPn1/DyU5/lUolK1euzCOPPJKnnnoqbW1ttR7pjHH11Vfne9/7Xp599tmhbe7cuVm2bFmeffZZcTKCFixY8JaX07/wwgt53/veV6OJzhy/+MUvMmbM8Ke+sWPHZnBwsEYT8X9xBeV/dHZ2Zvny5Zk7d26uuOKKbNy4McePH891111X69FOax0dHdmxY0e+8Y1vZNKkSenp6UmSNDU1paGhocbTnd4mTZr0lnt9Jk6cmKlTp7oHaITdfPPNufLKK3PnnXfmE5/4RPbv359t27Zl27ZttR7ttHfNNdfkjjvuyMyZM3PBBRfkO9/5Tu6+++586lOfqvVovFmFIffcc09l5syZlfHjx1euuOKKyt69e2s90mkvydtu27dvr/VoZ6Q/+IM/qNx00021HuOM8Nhjj1UuvPDCSn19fWX27NmVbdu21XqkM0J/f3/lpptuqsycObMyYcKEyu///u9X/u7v/q4yMDBQ69F4E++DAgAUxz0oAEBxBAoAUByBAgAUR6AAAMURKABAcQQKAFAcgQIAFEegAADFESgAQHEECgBQHIECABRHoAAAxflvJq7WjMgsKkMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['Chol'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9f324b29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:08.911706Z",
     "iopub.status.busy": "2025-08-09T05:28:08.911065Z",
     "iopub.status.idle": "2025-08-09T05:28:09.034813Z",
     "shell.execute_reply": "2025-08-09T05:28:09.034056Z"
    },
    "papermill": {
     "duration": 0.138982,
     "end_time": "2025-08-09T05:28:09.036375",
     "exception": false,
     "start_time": "2025-08-09T05:28:08.897393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='TG'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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NSBuvvnmqNVqcckll1Q9Sl1cf/31UavVtviYNGlS1WPV1UsvvRSf/OQnY5999omWlpY49NBDY/ny5VWP1W/ve9/70teuVqvFnDlzqh6tLrq7u+Paa6+NAw88MFpaWuKggw6KG2644V3/NsGuoqurKy655JIYP358tLS0xNFHHx3Lli3r8+Ps8G9S3JW89tprcfjhh8fs2bPjjDPOqHqcunr00Udjzpw5MXXq1Ni8eXN86UtfipNOOimeffbZGD58eNXj9Vt7e3vcfPPNMXHixCilxN133x2nnnpqrFixIiZPnlz1eHWzbNmyWLBgQRx22GFVj1JXkydPjp///Oe9l4cNGzrfctavXx/HHHNMfOxjH4slS5bEfvvtF6tXr4699tqr6tH6bdmyZdHd3d17+ZlnnokTTzwxzjzzzAqnqp+vfvWrcdttt8Xdd98dkydPjuXLl8f5558fbW1tcfHFF1c9Xr99+tOfjmeeeSbuueeeGDNmTNx7771xwgknxLPPPhtjx47d/gcqu5mIKIsXL656jAHzz3/+s0REefTRR6seZcDstdde5Tvf+U7VY9RNV1dXmThxYnnkkUfKscceW+bOnVv1SHUxb968cvjhh1c9xoC58sory4c//OGqxxgUc+fOLQcddFDp6empepS6mDFjRpk9e/YWy84444wya9asiiaqn9dff700NjaWH//4x1ssP+KII8o111zTp8faLU4x7E5effXViIjYe++9K56k/rq7u+P++++P1157LaZNm1b1OHUzZ86cmDFjRpxwwglVj1J3q1evjjFjxsSECRNi1qxZsXbt2qpHqpuHHnoopkyZEmeeeWaMHj06PvjBD8a3v/3tqsequ3//+99x7733xuzZs3eZP8z3bo4++uj4xS9+Ec8//3xERKxatSoee+yxmD59esWT9d/mzZuju7s7mpubt1je0tISjz32WN8erJ7lsiuIIXwEobu7u8yYMaMcc8wxVY9SV0899VQZPnx4aWxsLG1tbeUnP/lJ1SPVzaJFi8ohhxxS3njjjVJKGVJHEH7605+W73//+2XVqlXl4YcfLtOmTSsdHR2ls7Oz6tHqoqmpqTQ1NZWrr766PPnkk2XBggWlubm5fPe73616tLp64IEHSmNjY3nppZeqHqVuuru7y5VXXllqtVoZNmxYqdVq5cYbb6x6rLqZNm1aOfbYY8tLL71UNm/eXO65557S0NBQPvCBD/TpcQTCEHLhhReW8ePHlxdffLHqUepq06ZNZfXq1WX58uXlqquuKvvuu2/5wx/+UPVY/bZ27doyevTosmrVqt5lQykQ/tv69etLa2vrkDk9tMcee5Rp06Ztseyiiy4qH/rQhyqaaGCcdNJJ5eSTT656jLpatGhRaW9vL4sWLSpPPfVU+d73vlf23nvvIRN3a9asKR/5yEdKRJTGxsYyderUMmvWrDJp0qQ+PY5AGCLmzJlT2tvbywsvvFD1KAPu+OOPLxdccEHVY/Tb4sWLe3fgtz4iotRqtdLY2Fg2b95c9Yh1N2XKlHLVVVdVPUZddHR0lE996lNbLLv11lvLmDFjKpqo/v785z+XhoaG8uCDD1Y9Sl21t7eXb33rW1ssu+GGG8rBBx9c0UQDY8OGDWXdunWllFLOOuus8vGPf7xP9/cahF1cKSU+//nPx+LFi+OXv/xlHHjggVWPNOB6enpi06ZNVY/Rb8cff3w8/fTTsXLlyt6PKVOmxKxZs2LlypXR2NhY9Yh1tWHDhvjjH/8YBxxwQNWj1MUxxxyT3lL8/PPPx/jx4yuaqP7uuuuuGD16dMyYMaPqUerq9ddfj4aGLZ/+Ghsbo6enp6KJBsbw4cPjgAMOiPXr18fSpUvj1FNP7dP9h857jrZhw4YNsWbNmt7Lf/rTn2LlypWx9957R0dHR4WT9d+cOXNi4cKF8cMf/jBGjhwZf//73yMioq2tLVpaWiqerv+uvvrqmD59enR0dERXV1csXLgwfv3rX8fSpUurHq3fRo4cGYcccsgWy4YPHx777LNPWr4ruuKKK+KUU06J8ePHx7p162LevHnR2NgY55xzTtWj1cWll14aRx99dNx4441x1llnxe9///u444474o477qh6tLro6emJu+66K84777wh9fbUiIhTTjklvvKVr0RHR0dMnjw5VqxYEfPnz4/Zs2dXPVpdLF26NEopcfDBB8eaNWviC1/4QkyaNCnOP//8vj1Q/Q9q7Hx+9atflYhIH+edd17Vo/XbO21XRJS77rqr6tHqYvbs2WX8+PFlzz33LPvtt185/vjjy89+9rOqxxowQ+k1CGeffXY54IADyp577lnGjh1bzj777LJmzZqqx6qrH/3oR+WQQw4pTU1NZdKkSeWOO+6oeqS6Wbp0aYmI8txzz1U9St11dnaWuXPnlo6OjtLc3FwmTJhQrrnmmrJp06aqR6uLBx54oEyYMKHsueeeZf/99y9z5swpr7zySp8fx597BgASr0EAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBALuZWq22zY/rr7++97Y/+MEP4rjjjou99torWlpa4uCDD47Zs2fHihUrqtsAYFD4Vcuwm3nrD3pFRDzwwANx3XXXbfFXCUeMGBEjRoyIK6+8Mr7+9a/HxRdfHKeffnqMHz8+/vWvf8WSJUvisccei4cffriK8YFBMrT+RBfwrvbff//ez9va2qJWq22xLCLid7/7Xdxyyy3xjW98Iy6++OLe5R0dHXHkkUeGnytg6HOKAUgWLVoUI0aMiM997nPveH2tVhvkiYDBJhCA5Pnnn48JEybEsGH/f5Bx/vz5vacfRowYEa+++mqFEwIDTSAA22X27NmxcuXKWLBgQbz22mtOM8AQJxCAZOLEifHCCy/Em2++2bts1KhR8f73vz/Gjh1b4WTAYBEIQHLOOefEhg0b4tZbb616FKAi3sUAJNOmTYvLL788Lr/88vjLX/4SZ5xxRowbNy7+9re/xZ133hm1Wi0aGvx8AUOZPRx4R1/72tdi4cKFsWLFijj55JNj4sSJceaZZ0ZPT0/89re/jdbW1qpHBAaQX5QEACSOIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAk/weX4NFTmmolzgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['TG'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7a985fdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:09.064257Z",
     "iopub.status.busy": "2025-08-09T05:28:09.063970Z",
     "iopub.status.idle": "2025-08-09T05:28:09.205866Z",
     "shell.execute_reply": "2025-08-09T05:28:09.205017Z"
    },
    "papermill": {
     "duration": 0.157456,
     "end_time": "2025-08-09T05:28:09.207408",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.049952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGdCAYAAACyzRGfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAbRUlEQVR4nO3de2xW9f3A8U8pUjpsq+Bo6bhVR6ziXRgW3H6bdhLHCEaibsEEweku9YJkKujQMaeg2RxxUxjOIc6Bm3+Ac0bZxjaMERXxMp0b4tRBZK1bJi1iqErP749lzTrM9IGn30Pr65WcxH6f85x+TiT0nfOcckqyLMsCACCRPnkPAAB8uIgPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBIqm/eA/y3jo6O2LZtW1RUVERJSUne4wAAH0CWZbFjx46ora2NPn3+97WN/S4+tm3bFsOGDct7DABgL2zdujWGDh36P/fZ7+KjoqIiIv41fGVlZc7TAAAfRFtbWwwbNqzz5/j/st/Fx78/aqmsrBQfANDDfJBbJtxwCgAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBIqm/eA/D+Rs55IO8RCvbqwkl5jwDAfsqVDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AIKm+eQ+Q2sg5D+Q9AgB8qLnyAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACRVUHzs3r075s2bF3V1dVFeXh6HHXZYXHfddZFlWec+WZbFNddcE0OGDIny8vJobGyMzZs3F31wAKBnKig+brzxxli8eHH84Ac/iD/96U9x4403xk033RTf//73O/e56aab4pZbboklS5bE448/HgMGDIiJEyfGrl27ij48ANDz9C1k50cffTSmTJkSkyZNioiIkSNHxsqVK+OJJ56IiH9d9Vi0aFF84xvfiClTpkRExF133RXV1dWxevXq+MIXvlDk8QGAnqagKx/jx4+PtWvXxosvvhgREc8++2w88sgjcfrpp0dExCuvvBLNzc3R2NjY+Z6qqqoYN25crF+//j2P2d7eHm1tbV02AKD3KujKx5w5c6KtrS3q6+ujtLQ0du/eHddff31MmzYtIiKam5sjIqK6urrL+6qrqztf+28LFiyI+fPn783sAEAPVNCVj5///Ofx05/+NFasWBFPPfVULF++PL7zne/E8uXL93qAuXPnRmtra+e2devWvT4WALD/K+jKx+WXXx5z5szpvHfj6KOPjr/+9a+xYMGCmD59etTU1EREREtLSwwZMqTzfS0tLXHccce95zHLysqirKxsL8cHAHqagq58vPXWW9GnT9e3lJaWRkdHR0RE1NXVRU1NTaxdu7bz9ba2tnj88cejoaGhCOMCAD1dQVc+Jk+eHNdff30MHz48Ro8eHU8//XTcfPPNMXPmzIiIKCkpiVmzZsW3v/3tGDVqVNTV1cW8efOitrY2zjjjjO6YHwDoYQqKj+9///sxb968+NrXvhavv/561NbWxpe//OW45pprOve54oorYufOnXHhhRfG9u3b4+STT46HHnoo+vfvX/ThAYCepyT7z3+edD/Q1tYWVVVV0draGpWVlUU//sg5DxT9mOzp1YWT8h4BgIQK+fnt2S4AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQVMHx8dprr8W5554bgwYNivLy8jj66KPjySef7Hw9y7K45pprYsiQIVFeXh6NjY2xefPmog4NAPRcBcXHG2+8ERMmTIgDDjggHnzw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o+M3v/lN59d9+/aOv87eeOONmDBhQnzmM5+JBx98MD760Y/G5s2b4+CDD857tKLYsGFD7N69u/Pr559/Pj772c/GWWedleNUxXHjjTfG4sWLY/ny5TF69Oh48sknY8aMGVFVVRWXXHJJ3uMVxZe+9KV4/vnn4yc/+UnU1tbG3XffHY2NjfHCCy/Exz72sQ9+oIyiiIhs1apVeY/RbV5//fUsIrJ169blPUq3Ofjgg7Mf/ehHeY9RNDt27MhGjRqV/frXv87+7//+L7v00kvzHqlorr322uzYY4/Ne4xuceWVV2Ynn3xy3mMkc+mll2aHHXZY1tHRkfco+2zSpEnZzJkzu6ydeeaZ2bRp03KaqLjeeuutrLS0NPvlL3/ZZf2EE07Irr766oKO5WMXPpDW1taIiBg4cGDOkxTf7t2745577omdO3f2qkcANDU1xaRJk6KxsTHvUbrF5s2bo7a2Ng499NCYNm1abNmyJe+RiuIXv/hFjBkzJs4666wYPHhwHH/88XH77bfnPVa3ePvtt+Puu++OmTNn9pgHif4v48ePj7Vr18aLL74YERHPPvtsPPLII3H66afnPFlxvPvuu7F79+7o379/l/Xy8vJ45JFHCjpW77hOSbfq6OiIWbNmxYQJE+Koo47Ke5yiee6556KhoSF27doVBx54YKxatSqOPPLIvMcqinvuuSeeeuqpvfosticYN25c3HnnnXH44YfH3/72t5g/f3588pOfjOeffz4qKiryHm+fvPzyy7F48eKYPXt2XHXVVbFhw4a45JJLol+/fjF9+vS8xyuq1atXx/bt2+O8887Le5SimDNnTrS1tUV9fX2UlpbG7t274/rrr49p06blPVpRVFRURENDQ1x33XVxxBFHRHV1daxcuTLWr18fH//4xws7WDEvyXyYRS/+2OUrX/lKNmLEiGzr1q15j1JU7e3t2ebNm7Mnn3wymzNnTnbIIYdkf/zjH/Mea59t2bIlGzx4cPbss892rvW2j13+2xtvvJFVVlb2io/NDjjggKyhoaHL2sUXX5yddNJJOU3UfU477bTs85//fN5jFM3KlSuzoUOHZitXrsz+8Ic/ZHfddVc2cODA7M4778x7tKJ56aWXsk996lNZRGSlpaXZ2LFjs2nTpmX19fUFHUd8FElvjY+mpqZs6NCh2csvv5z3KN3u1FNPzS688MK8x9hnq1at6vyL4d9bRGQlJSVZaWlp9u677+Y9YrcYM2ZMNmfOnLzH2GfDhw/Pzj///C5rt912W1ZbW5vTRN3j1Vdfzfr06ZOtXr0671GKZujQodkPfvCDLmvXXXdddvjhh+c0Ufd58803s23btmVZlmVnn3129rnPfa6g97vng/eUZVlcdNFFsWrVqvjtb38bdXV1eY/U7To6OqK9vT3vMfbZqaeeGs8991w888wznduYMWNi2rRp8cwzz0RpaWneIxbdm2++GX/5y19iyJAheY+yzyZMmLDHr7W/+OKLMWLEiJwm6h7Lli2LwYMHx6RJk/IepWjeeuut6NOn64/V0tLS6OjoyGmi7jNgwIAYMmRIvPHGG7FmzZqYMmVKQe93z8c+ePPNN+Oll17q/PqVV16JZ555JgYOHBjDhw/PcbJ919TUFCtWrIj77rsvKioqorm5OSIiqqqqory8POfp9t3cuXPj9NNPj+HDh8eOHTtixYoV8fvf/z7WrFmT92j7rKKiYo97cwYMGBCDBg3qNffsfP3rX4/JkyfHiBEjYtu2bXHttddGaWlpfPGLX8x7tH122WWXxfjx4+OGG26Is88+O5544olYunRpLF26NO/RiqajoyOWLVsW06dP7zW/Ih0RMXny5Lj++utj+PDhMXr06Hj66afj5ptvjpkzZ+Y9WtGsWbMmsiyLww8/PF566aW4/PLLo76+PmbMmFHYgYp/MebD43e/+10WEXts06dPz3u0ffZe5xUR2bJly/IerShmzpyZjRgxIuvXr1/20Y9+NDv11FOzX/3qV3mP1W162z0f55xzTjZkyJCsX79+2cc+9rHsnHPOyV566aW8xyqa+++/PzvqqKOysrKyrL6+Plu6dGneIxXVmjVrsojINm3alPcoRdXW1pZdeuml2fDhw7P+/ftnhx56aHb11Vdn7e3teY9WND/72c+yQw89NOvXr19WU1OTNTU1Zdu3by/4OCVZ1ov+6TUAYL/nng8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkNT/AznmXwGj+k38AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['TG'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "df8691c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:09.237258Z",
     "iopub.status.busy": "2025-08-09T05:28:09.236552Z",
     "iopub.status.idle": "2025-08-09T05:28:09.358383Z",
     "shell.execute_reply": "2025-08-09T05:28:09.357617Z"
    },
    "papermill": {
     "duration": 0.138375,
     "end_time": "2025-08-09T05:28:09.359848",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.221473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='HDL'>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['HDL'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "885bc6e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:09.389567Z",
     "iopub.status.busy": "2025-08-09T05:28:09.388617Z",
     "iopub.status.idle": "2025-08-09T05:28:09.531781Z",
     "shell.execute_reply": "2025-08-09T05:28:09.530871Z"
    },
    "papermill": {
     "duration": 0.159036,
     "end_time": "2025-08-09T05:28:09.533161",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.374125",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['HDL'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "202eeb25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:09.562601Z",
     "iopub.status.busy": "2025-08-09T05:28:09.562292Z",
     "iopub.status.idle": "2025-08-09T05:28:09.674317Z",
     "shell.execute_reply": "2025-08-09T05:28:09.673466Z"
    },
    "papermill": {
     "duration": 0.128474,
     "end_time": "2025-08-09T05:28:09.675889",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.547415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='LDL'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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cv7seL14JBgA1Nmll14al1566ZiP14MzCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAkslVDzhSrVaLzZs3jzwNABFuH6owoQKhKIpoa2uregYAE4zbh/pzFwMAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAADJ5KoHwO8phn+NsuoRx9vQ4d9/ugkVw79WPQE4RgKBCemkHf+qekJdtf9nY9UTAI7iLgYAIHEGgQmjVqvF5s2bq55RN2VZxuDgYEREtLa2RlEUFS+qj1qtVvUE4C8QCEwYRVFEW1tb1TPqaurUqVVPAPhd7mIAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAAJLJY33BsiwjIqKvr2/cxgAAx9dvt9u/3Y6PZsyB0N/fHxERnZ2dY30VAEBF+vv7Y/r06aMeL8o/S4hRDA8Px969e6O9vT2KohjzwH+6vr6+6OzsjD179sS0adOqntMUXKfjz3U6/lyn4891+teUZRn9/f0xZ86caGkZ/ZEGYz6D0NLSEh0dHWN9cf6fadOm+YAeZ67T8ec6HX+u0/HnOv1zf3Tm4DcepAgAJAIBAEgEQsVaW1vj0UcfjdbW1qqnNA3X6fhznY4/1+n4c52OrzE/SBEAaF7OIAAAiUAAABKBAAAkAgEASARCRbZs2RJLliyJOXPmRFEU8fbbb1c9qeGtXbs2Fi5cGO3t7TFr1qy4+eabY+fOnVXPamjr16+PBQsWjPzgmcWLF8fmzZurntVUnn766SiKIu6///6qpzSsxx57LIqiOOrPeeedV/WshicQKnLo0KG48MIL44UXXqh6StP4+OOPY9WqVbF169Z4//334/Dhw3HDDTfEoUOHqp7WsDo6OuLpp5+Obdu2xeeffx7XXHNN3HTTTfHVV19VPa0p9Pb2xosvvhgLFiyoekrDmz9/fuzbt2/kzyeffFL1pIY35h+1zN/T3d0d3d3dVc9oKu++++5Rz2/YsCFmzZoV27ZtiyuvvLKiVY1tyZIlRz3/1FNPxfr162Pr1q0xf/78ilY1h4MHD8by5cvjpZdeiieffLLqOQ1v8uTJMXv27KpnNBVnEGhaBw4ciIiIGTNmVLykOQwNDcXGjRvj0KFDsXjx4qrnNLxVq1bFjTfeGNddd13VU5rC119/HXPmzIlzzjknli9fHrt37656UsNzBoGmNDw8HPfff39cdtllccEFF1Q9p6F98cUXsXjx4hgYGIiTTjopNm3aFOeff37Vsxraxo0bY/v27dHb21v1lKawaNGi2LBhQ8ybNy/27dsXjz/+eFxxxRXx5ZdfRnt7e9XzGpZAoCmtWrUqvvzyS/dDjoN58+bFjh074sCBA/HWW2/FihUr4uOPPxYJY7Rnz55YvXp1vP/++1Gr1aqe0xSOvLt2wYIFsWjRojjzzDPjzTffjLvvvrvCZY1NINB07r333vj3v/8dW7Zs8SvJx8GUKVNi7ty5ERFx8cUXR29vb6xbty5efPHFipc1pm3btsXPP/8cF1100chlQ0NDsWXLlnj++edjcHAwJk2aVOHCxnfyySfHueeeG998803VUxqaQKBplGUZ9913X2zatCk++uijOPvss6ue1JSGh4djcHCw6hkN69prr40vvvjiqMvuuuuuOO+88+Khhx4SB+Pg4MGD8e2338Ydd9xR9ZSGJhAqcvDgwaPq9rvvvosdO3bEjBkzoqurq8JljWvVqlXR09MT77zzTrS3t8ePP/4YERHTp0+Ptra2itc1pocffji6u7ujq6sr+vv7o6enJz766KN47733qp7WsNrb29PjYk488cSYOXOmx8uM0YMPPhhLliyJM888M/bu3RuPPvpoTJo0KZYuXVr1tIYmECry+eefx9VXXz3y/Jo1ayIiYsWKFbFhw4aKVjW29evXR0TEVVddddTlr7zySqxcubL+g5rAzz//HHfeeWfs27cvpk+fHgsWLIj33nsvrr/++qqnwYgffvghli5dGvv3749TTz01Lr/88ti6dWuceuqpVU9raH7dMwCQ+DkIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEOAfYuXKlXHzzTf/7rGzzjoriqKIoiiira0tzjrrrLjtttviww8/POrv7dq1K4qiiB07dhz/wUClBAIQERFPPPFE7Nu3L3bu3BmvvfZanHzyyXHdddfFU089VfU0oAJ+WRMQEf/7WwZnz54dERFdXV1x5ZVXxumnnx6PPPJI3HrrrTFv3ryKFwL15AwCMKrVq1dHWZbxzjvvVD0FqDOBAIxqxowZMWvWrNi1a1fVU4A6EwjAHyrLMoqiqHoGUGcCARjV/v3745dffomzzz676ilAnQkEYFTr1q2LlpaWUb89EmhevosB/kEOHDiQfobBzJkzIyKiv78/fvzxxzh8+HB899138frrr8fLL78ca9eujblz5x71Mjt37kyve/78+XHCCScct+1AfRVlWZZVjwCOv5UrV8arr76aLr/77rvjgw8+iO+//z4iIqZMmRKzZ8+OSy65JO655564+uqrR/7url27Rr27Yc+ePdHR0XF8xgN1JxAAgMRjEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAACS/wFcYkhplt2yBQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['LDL'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "33821473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:09.706149Z",
     "iopub.status.busy": "2025-08-09T05:28:09.705822Z",
     "iopub.status.idle": "2025-08-09T05:28:09.829926Z",
     "shell.execute_reply": "2025-08-09T05:28:09.829259Z"
    },
    "papermill": {
     "duration": 0.140859,
     "end_time": "2025-08-09T05:28:09.831429",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.690570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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p33Px8mTJ2PTpk0xPDwcra2t0dvbGydOnIjFixeP7TN//vxobm6OHTt2/NfjjIyMxNDQ0LgNAJi8Jhwfe/fujenTp0dNTU18//vfj82bN8ell14a/f39MXXq1JgxY8a4/RsaGqK/v/+/Hq+rqysKhcLY1tTUNOF/BABQOSYcHxdffHHs2bMn3nzzzfjBD34QK1asiL/85S+nPUBnZ2cMDg6ObX19fad9LADgs696oj8wderUuOiiiyIiYsGCBbFr16548skn44477ojjx4/H4cOHx139GBgYiMbGxv96vJqamqipqZn45ABARTrjz/kYHR2NkZGRWLBgQZx77rmxbdu2sef27dsX+/fvj9bW1jN9GQBgkpjQlY/Ozs5YunRpNDc3x5EjR2Ljxo3xxhtvxNatW6NQKMSqVauio6Mj6uvro66uLlavXh2tra2f+p0uAMDkN6H4OHToUNx9991x8ODBKBQK0dLSElu3bo2bbropIiIef/zxmDJlSrS1tcXIyEgsWbIknn766bMyOABQmc74cz5Kzed8fJzP+QBOh8/5IFPK53wAAJwO8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAECqCcVHV1dXXHXVVVFbWxuzZs2KW2+9Nfbt2zdun2PHjkV7e3vMnDkzpk+fHm1tbTEwMFDSoQGAyjWh+Ojp6Yn29vbYuXNnvP7663HixIm4+eabY3h4eGyf+++/P15++eV44YUXoqenJw4cOBC33XZbyQcHACpT9UR23rJly7jHGzZsiFmzZkVvb29cd911MTg4GM8//3xs3LgxFi1aFBER69evj0suuSR27twZV199dekmBwAq0hnd8zE4OBgREfX19RER0dvbGydOnIjFixeP7TN//vxobm6OHTt2nPIYIyMjMTQ0NG4DACav046P0dHRWLNmTVxzzTVx+eWXR0REf39/TJ06NWbMmDFu34aGhujv7z/lcbq6uqJQKIxtTU1NpzsSAFABTjs+2tvb4+23345Nmzad0QCdnZ0xODg4tvX19Z3R8QCAz7YJ3fPxkXvvvTdeeeWV2L59e8yZM2dsvbGxMY4fPx6HDx8ed/VjYGAgGhsbT3msmpqaqKmpOZ0xAIAKNKErH8ViMe69997YvHlz/OEPf4h58+aNe37BggVx7rnnxrZt28bW9u3bF/v374/W1tbSTAwAVLQJXflob2+PjRs3xksvvRS1tbVj93EUCoU477zzolAoxKpVq6KjoyPq6+ujrq4uVq9eHa2trd7pAgBExATjY926dRERcf31149bX79+fdxzzz0REfH444/HlClToq2tLUZGRmLJkiXx9NNPl2RYAKDyTSg+isXiJ+4zbdq0WLt2baxdu/a0hwIAJi/f7QIApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAECq6nIPAMDZMffBV8s9woR92L2s3COQwJUPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACCV+AAAUokPACDVhONj+/btsXz58pg9e3ZUVVXFiy++OO75YrEYDz30UHz5y1+O8847LxYvXhzvvfdeqeYFACrchONjeHg4rrjiili7du0pn//5z38eTz31VDzzzDPx5ptvxvnnnx9LliyJY8eOnfGwAEDlq57oDyxdujSWLl16yueKxWI88cQT8eMf/zhuueWWiIj49a9/HQ0NDfHiiy/Gt7/97TObFgCoeCW95+ODDz6I/v7+WLx48dhaoVCIhQsXxo4dO075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du3aFU8++WQ8++yzZZ6sMvX29sahQ4fiyiuvHFs7efJkbN++PX75y1/GyMhInHPOOWWcsPLNmDEjvva1r8X7779f7lEqnviAT1AsFmP16tWxefPmeOONN2LevHnlHmlSGh0djZGRkXKPUbFuvPHG2Lt377i1lStXxvz58+OBBx4QHiVw9OjR+Otf/xrf+c53yj1KxRMfk9DRo0fHlfkHH3wQe/bsifr6+mhubi7jZJWpvb09Nm7cGC+99FLU1tZGf39/REQUCoU477zzyjxdZers7IylS5dGc3NzHDlyJDZu3BhvvPFGbN26tdyjVaza2tqP3Yd0/vnnx8yZM92fdJp++MMfxvLly+PCCy+MAwcOxMMPPxznnHNO3HnnneUereKJj0lo9+7dccMNN4w97ujoiIiIFStWxIYNG8o0VeVat25dRERcf/3149bXr18f99xzT/5Ak8ChQ4fi7rvvjoMHD0ahUIiWlpbYunVr3HTTTeUeDcb87W9/izvvvDP++c9/xgUXXBDXXntt7Ny5My644IJyj1bxqorFYrHcQwAAnx8+5wMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU/xcOWv+BSbDSvgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['LDL'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "de395bdb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:09.861957Z",
     "iopub.status.busy": "2025-08-09T05:28:09.861590Z",
     "iopub.status.idle": "2025-08-09T05:28:09.978586Z",
     "shell.execute_reply": "2025-08-09T05:28:09.977731Z"
    },
    "papermill": {
     "duration": 0.133755,
     "end_time": "2025-08-09T05:28:09.979983",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.846228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='VLDL'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['VLDL'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "92cb93b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.011030Z",
     "iopub.status.busy": "2025-08-09T05:28:10.010567Z",
     "iopub.status.idle": "2025-08-09T05:28:10.148706Z",
     "shell.execute_reply": "2025-08-09T05:28:10.147913Z"
    },
    "papermill": {
     "duration": 0.155436,
     "end_time": "2025-08-09T05:28:10.150306",
     "exception": false,
     "start_time": "2025-08-09T05:28:09.994870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['VLDL'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "66443e20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.182382Z",
     "iopub.status.busy": "2025-08-09T05:28:10.182069Z",
     "iopub.status.idle": "2025-08-09T05:28:10.292798Z",
     "shell.execute_reply": "2025-08-09T05:28:10.291692Z"
    },
    "papermill": {
     "duration": 0.12855,
     "end_time": "2025-08-09T05:28:10.294395",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.165845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='BMI'>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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yyXEDKampuL48ePR3d0dlUpl1gPOpfHx8ejv749jx45FT09P2eMsCNa88ax541nzxrPmV09RFDExMRFr1qyJtraZ32kw6zMIbW1t0dfXN9sPb6ienh4bqsGseeNZ88az5o1nza+O/3bm4AJvUgQAEoEAACTzOhA6OjriW9/6VnR0dJQ9yoJhzRvPmjeeNW88a954s36TIgAwf83rMwgAwOwIBAAgEQgAQCIQAICk5QNh165dsX79+uju7o63vvWt8alPfSqOHj067ZharRZDQ0PR29sbXV1d8ZnPfCZOnTpV0sSt70rW/I477ohKpTLt8pWvfKWkiVvfd7/73bj55pvr/5OYDRs2xL59++r32+NX3+XW3B6few8++GBUKpV44IEH6rfZ643T8oEwMjISQ0ND8dxzz8X+/fvj3Llzceedd8bZs2frx2zfvj1+8YtfxJ49e2JkZCSOHz8en/70p0ucurVdyZpHRHzpS1+KEydO1C8PPfRQSRO3vr6+vnjwwQfj8OHD8cc//jE+8pGPxCc/+cn4y1/+EhH2+Fy43JpH2ONz6dChQ/G9730vbr755mm32+sNVMwzL730UhERxcjISFEURfHqq68WixcvLvbs2VM/5q9//WsREcXBgwfLGnNeeeOaF0VRfOhDHyq2bdtW3lALwLXXXls8+uij9ngDXVjzorDH59LExETxrne9q9i/f/+0dbbXG6vlzyC80enTpyMiYvny5RERcfjw4Th37lx89KMfrR9zww03xNq1a+PgwYOlzDjfvHHNL3jyySdjxYoVcdNNN8XOnTvj3//+dxnjzTvnz5+P3bt3x9mzZ2PDhg32eAO8cc0vsMfnxtDQUHz84x+ftqcjPJ432qx/WVMzmpqaigceeCA++MEPxk033RQRESdPnowlS5bEW97ylmnHrly5Mk6ePFnClPPLpdY8ImLz5s1x/fXXx5o1a+LIkSPxjW98I44ePRo//elPS5y2tb3wwguxYcOGqNVq0dXVFXv37o0bb7wxRkdH7fE5MtOaR9jjc2X37t3x/PPPx6FDh9J9Hs8ba14FwtDQUPz5z3+O3//+92WPsmDMtOZf/vKX69ff8573xOrVq2Pjxo3x4osvxjvf+c5GjzkvvPvd747R0dE4ffp0/PjHP44tW7bEyMhI2WPNazOt+Y033miPz4Fjx47Ftm3bYv/+/VGtVsseZ8GbNy8x3H///fH000/Hb3/722m/hnrVqlXxn//8J1599dVpx586dSpWrVrV4Cnnl5nW/FLe//73R0TE3/72t0aMNi8tWbIkBgYGYt26dbFr16645ZZb4pFHHrHH59BMa34p9vibd/jw4XjppZfive99b7S3t0d7e3uMjIzEt7/97Whvb4+VK1fa6w3U8oFQFEXcf//9sXfv3vjNb34T73jHO6bdv27duli8eHE888wz9duOHj0aY2Nj015L5Mpdbs0vZXR0NCIiVq9ePcfTLRxTU1MxOTlpjzfQhTW/FHv8zdu4cWO88MILMTo6Wr+8733vi3vvvbd+3V5vnJZ/iWFoaCiGh4fjZz/7WXR3d9dfh1q2bFl0dnbGsmXL4r777osdO3bE8uXLo6enJ772ta/Fhg0b4gMf+EDJ07emy635iy++GMPDw3HXXXdFb29vHDlyJLZv3x633357+pElrszOnTtjcHAw1q5dGxMTEzE8PBwHDhyIX/3qV/b4HPlva26Pz43u7u5p72WKiLjmmmuit7e3fru93kBl/xjFmxURl7w8/vjj9WNee+214qtf/Wpx7bXXFkuXLi3uueee4sSJE+UN3eIut+ZjY2PF7bffXixfvrzo6OgoBgYGiq9//evF6dOnyx28hW3durW4/vrriyVLlhTXXXddsXHjxuLXv/51/X57/Or7b2tujzfOG3+c1F5vHL/uGQBIWv49CADA1ScQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQYIH44he/GJVKpX7p7e2NTZs2xZEjR+rHXLjvueeem/axk5OT0dvbG5VKJQ4cODDt+KeeeqpB/wVAIwkEWEA2bdoUJ06ciBMnTsQzzzwT7e3tcffdd087pr+/Px5//PFpt+3duze6uroaOSpQMoEAC0hHR0esWrUqVq1aFbfeemt885vfjGPHjsXLL79cP2bLli2xe/fueO211+q3PfbYY7Fly5YyRgZKIhBggTpz5kz84Ac/iIGBgejt7a3fvm7dunj7298eP/nJTyIiYmxsLH73u9/F5z//+bJGBUogEGABefrpp6Orqyu6urqiu7s7fv7zn8ePfvSjaGub/lCwdevWeOyxxyIi4oknnoi77rorrrvuujJGBkoiEGAB+fCHPxyjo6MxOjoaf/jDH+JjH/tYDA4Oxj/+8Y9px33uc5+LgwcPxt///vd44oknYuvWrSVNDJRFIMACcs0118TAwEAMDAzE+vXr49FHH42zZ8/G97///WnH9fb2xt133x333Xdf1Gq1GBwcLGlioCwCARawSqUSbW1t096QeMHWrVvjwIED8YUvfCEWLVpUwnRAmdrLHgBonMnJyTh58mRERPzrX/+K73znO3HmzJn4xCc+kY7dtGlTvPzyy9HT09PoMYEmIBBgAfnlL38Zq1evjoiI7u7uuOGGG2LPnj1xxx13pGMrlUqsWLGiwRMCzaJSFEVR9hAAQHPxHgQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACA5P8AVKawW+vCuZEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['BMI'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "742b5f7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.326184Z",
     "iopub.status.busy": "2025-08-09T05:28:10.325873Z",
     "iopub.status.idle": "2025-08-09T05:28:10.594328Z",
     "shell.execute_reply": "2025-08-09T05:28:10.593512Z"
    },
    "papermill": {
     "duration": 0.286082,
     "end_time": "2025-08-09T05:28:10.595792",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.309710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['BMI'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a71b25b",
   "metadata": {
    "papermill": {
     "duration": 0.015094,
     "end_time": "2025-08-09T05:28:10.626792",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.611698",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Approach One: Multi-class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7e224d36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.658163Z",
     "iopub.status.busy": "2025-08-09T05:28:10.657861Z",
     "iopub.status.idle": "2025-08-09T05:28:10.675222Z",
     "shell.execute_reply": "2025-08-09T05:28:10.674411Z"
    },
    "papermill": {
     "duration": 0.034547,
     "end_time": "2025-08-09T05:28:10.676524",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.641977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>2.3</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>36.6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>35.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  AGE  Urea   Cr  HbA1c  Chol   TG  HDL  LDL  VLDL   BMI  Class\n",
       "0         0   50   4.7   46    4.9   4.2  0.9  2.4  1.4   0.5  24.0      0\n",
       "1         1   26   4.5   62    4.9   3.7  1.4  1.1  2.1   0.6  23.0      0\n",
       "2         1   33   7.1   46    4.9   4.9  1.0  0.8  2.0   0.4  21.0      0\n",
       "3         0   45   2.3   24    4.0   2.9  1.0  1.0  1.5   0.4  21.0      0\n",
       "4         0   50   2.0   50    4.0   3.6  1.3  0.9  2.1   0.6  24.0      0\n",
       "..      ...  ...   ...  ...    ...   ...  ...  ...  ...   ...   ...    ...\n",
       "259       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  30.0      2\n",
       "260       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  36.6      2\n",
       "261       1   60  20.8  800    9.0   2.3  1.1  0.9  0.9   0.5  33.0      2\n",
       "262       1   56  20.8  800    9.0   4.6  2.0  1.2  2.5   0.9  35.0      2\n",
       "263       1   58  20.8  800    9.1   6.6  2.9  1.1  4.3   1.3  33.0      2\n",
       "\n",
       "[264 rows x 12 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_one = df.copy()\n",
    "df_one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f26477b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.708508Z",
     "iopub.status.busy": "2025-08-09T05:28:10.708212Z",
     "iopub.status.idle": "2025-08-09T05:28:10.713762Z",
     "shell.execute_reply": "2025-08-09T05:28:10.712890Z"
    },
    "papermill": {
     "duration": 0.022934,
     "end_time": "2025-08-09T05:28:10.715207",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.692273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_one = df_one.drop(['Class'], axis=1)\n",
    "y_one = df_one['Class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "566cdfa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.747855Z",
     "iopub.status.busy": "2025-08-09T05:28:10.747214Z",
     "iopub.status.idle": "2025-08-09T05:28:10.753642Z",
     "shell.execute_reply": "2025-08-09T05:28:10.752828Z"
    },
    "papermill": {
     "duration": 0.024339,
     "end_time": "2025-08-09T05:28:10.755086",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.730747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      0\n",
       "2      0\n",
       "3      0\n",
       "4      0\n",
       "      ..\n",
       "259    2\n",
       "260    2\n",
       "261    2\n",
       "262    2\n",
       "263    2\n",
       "Name: Class, Length: 264, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1faa27b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:10.787797Z",
     "iopub.status.busy": "2025-08-09T05:28:10.787452Z",
     "iopub.status.idle": "2025-08-09T05:28:11.060115Z",
     "shell.execute_reply": "2025-08-09T05:28:11.059302Z"
    },
    "papermill": {
     "duration": 0.29049,
     "end_time": "2025-08-09T05:28:11.061702",
     "exception": false,
     "start_time": "2025-08-09T05:28:10.771212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_one, y_one, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fc46acc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:11.094814Z",
     "iopub.status.busy": "2025-08-09T05:28:11.094251Z",
     "iopub.status.idle": "2025-08-09T05:28:11.244294Z",
     "shell.execute_reply": "2025-08-09T05:28:11.243362Z"
    },
    "papermill": {
     "duration": 0.168554,
     "end_time": "2025-08-09T05:28:11.246213",
     "exception": false,
     "start_time": "2025-08-09T05:28:11.077659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7547169811320754"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import f1_score, roc_auc_score\n",
    "\n",
    "lr_one = LogisticRegression(random_state=42).fit(X_train, y_train)\n",
    "y_pred = lr_one.predict(X_test)\n",
    "f1_score(y_test, y_pred, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "948142cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:11.301465Z",
     "iopub.status.busy": "2025-08-09T05:28:11.300781Z",
     "iopub.status.idle": "2025-08-09T05:28:11.318436Z",
     "shell.execute_reply": "2025-08-09T05:28:11.317719Z"
    },
    "papermill": {
     "duration": 0.047387,
     "end_time": "2025-08-09T05:28:11.320450",
     "exception": false,
     "start_time": "2025-08-09T05:28:11.273063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.865672907339574"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob = lr_one.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_pred_prob, multi_class='ovr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f3aaef9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:11.366256Z",
     "iopub.status.busy": "2025-08-09T05:28:11.365948Z",
     "iopub.status.idle": "2025-08-09T05:28:16.689773Z",
     "shell.execute_reply": "2025-08-09T05:28:16.688410Z"
    },
    "papermill": {
     "duration": 5.344021,
     "end_time": "2025-08-09T05:28:16.691354",
     "exception": false,
     "start_time": "2025-08-09T05:28:11.347333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001042 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 346\n",
      "[LightGBM] [Info] Number of data points in the train set: 211, number of used features: 11\n",
      "[LightGBM] [Info] Start training from score -0.995149\n",
      "[LightGBM] [Info] Start training from score -1.886122\n",
      "[LightGBM] [Info] Start training from score -0.736738\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9811320754716981"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import lightgbm as lgb \n",
    "\n",
    "lgb_one = lgb.LGBMClassifier(random_state=42).fit(X_train, y_train)\n",
    "y_pred = lgb_one.predict(X_test)\n",
    "f1_score(y_test, y_pred, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1fe40ad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:16.727956Z",
     "iopub.status.busy": "2025-08-09T05:28:16.726785Z",
     "iopub.status.idle": "2025-08-09T05:28:16.738100Z",
     "shell.execute_reply": "2025-08-09T05:28:16.737189Z"
    },
    "papermill": {
     "duration": 0.030377,
     "end_time": "2025-08-09T05:28:16.739768",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.709391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.999525166191833"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob = lgb_one.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_pred_prob, multi_class='ovr')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68d1798c",
   "metadata": {
    "papermill": {
     "duration": 0.016104,
     "end_time": "2025-08-09T05:28:16.774799",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.758695",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Approach Two: Predict-diabetic & Diabetic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "98845a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:16.808658Z",
     "iopub.status.busy": "2025-08-09T05:28:16.808352Z",
     "iopub.status.idle": "2025-08-09T05:28:16.824869Z",
     "shell.execute_reply": "2025-08-09T05:28:16.824143Z"
    },
    "papermill": {
     "duration": 0.035022,
     "end_time": "2025-08-09T05:28:16.826163",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.791141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>2.3</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>36.6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>35.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  AGE  Urea   Cr  HbA1c  Chol   TG  HDL  LDL  VLDL   BMI  Class\n",
       "0         0   50   4.7   46    4.9   4.2  0.9  2.4  1.4   0.5  24.0      0\n",
       "1         1   26   4.5   62    4.9   3.7  1.4  1.1  2.1   0.6  23.0      0\n",
       "2         1   33   7.1   46    4.9   4.9  1.0  0.8  2.0   0.4  21.0      0\n",
       "3         0   45   2.3   24    4.0   2.9  1.0  1.0  1.5   0.4  21.0      0\n",
       "4         0   50   2.0   50    4.0   3.6  1.3  0.9  2.1   0.6  24.0      0\n",
       "..      ...  ...   ...  ...    ...   ...  ...  ...  ...   ...   ...    ...\n",
       "259       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  30.0      2\n",
       "260       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  36.6      2\n",
       "261       1   60  20.8  800    9.0   2.3  1.1  0.9  0.9   0.5  33.0      2\n",
       "262       1   56  20.8  800    9.0   4.6  2.0  1.2  2.5   0.9  35.0      2\n",
       "263       1   58  20.8  800    9.1   6.6  2.9  1.1  4.3   1.3  33.0      2\n",
       "\n",
       "[264 rows x 12 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_two = df.copy()\n",
    "df_two"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "82f0510d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:16.861555Z",
     "iopub.status.busy": "2025-08-09T05:28:16.861245Z",
     "iopub.status.idle": "2025-08-09T05:28:16.878998Z",
     "shell.execute_reply": "2025-08-09T05:28:16.878201Z"
    },
    "papermill": {
     "duration": 0.036943,
     "end_time": "2025-08-09T05:28:16.880396",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.843453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>2.3</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>36.6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  AGE  Urea   Cr  HbA1c  Chol   TG  HDL  LDL  VLDL   BMI  Class\n",
       "0         0   50   4.7   46    4.9   4.2  0.9  2.4  1.4   0.5  24.0      0\n",
       "1         1   26   4.5   62    4.9   3.7  1.4  1.1  2.1   0.6  23.0      0\n",
       "2         1   33   7.1   46    4.9   4.9  1.0  0.8  2.0   0.4  21.0      0\n",
       "3         0   45   2.3   24    4.0   2.9  1.0  1.0  1.5   0.4  21.0      0\n",
       "4         0   50   2.0   50    4.0   3.6  1.3  0.9  2.1   0.6  24.0      0\n",
       "..      ...  ...   ...  ...    ...   ...  ...  ...  ...   ...   ...    ...\n",
       "259       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  30.0      1\n",
       "260       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  36.6      1\n",
       "261       1   60  20.8  800    9.0   2.3  1.1  0.9  0.9   0.5  33.0      1\n",
       "262       1   56  20.8  800    9.0   4.6  2.0  1.2  2.5   0.9  35.0      1\n",
       "263       1   58  20.8  800    9.1   6.6  2.9  1.1  4.3   1.3  33.0      1\n",
       "\n",
       "[264 rows x 12 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_two.loc[df_two['Class'] > 0, 'Class'] = 1\n",
    "df_two"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9cc2848c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:16.916598Z",
     "iopub.status.busy": "2025-08-09T05:28:16.916288Z",
     "iopub.status.idle": "2025-08-09T05:28:16.922860Z",
     "shell.execute_reply": "2025-08-09T05:28:16.922126Z"
    },
    "papermill": {
     "duration": 0.025739,
     "end_time": "2025-08-09T05:28:16.924143",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.898404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Class\n",
       "1    168\n",
       "0     96\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_two['Class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a52ecf70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:16.959315Z",
     "iopub.status.busy": "2025-08-09T05:28:16.959026Z",
     "iopub.status.idle": "2025-08-09T05:28:16.964740Z",
     "shell.execute_reply": "2025-08-09T05:28:16.963850Z"
    },
    "papermill": {
     "duration": 0.024795,
     "end_time": "2025-08-09T05:28:16.966127",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.941332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_two = df_two.drop(['Class'], axis=1)\n",
    "y_two = df_two['Class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "683df1a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.001646Z",
     "iopub.status.busy": "2025-08-09T05:28:17.001376Z",
     "iopub.status.idle": "2025-08-09T05:28:17.008183Z",
     "shell.execute_reply": "2025-08-09T05:28:17.007004Z"
    },
    "papermill": {
     "duration": 0.026203,
     "end_time": "2025-08-09T05:28:17.009645",
     "exception": false,
     "start_time": "2025-08-09T05:28:16.983442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_two, y_two, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "891dcd32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.046955Z",
     "iopub.status.busy": "2025-08-09T05:28:17.046611Z",
     "iopub.status.idle": "2025-08-09T05:28:17.086918Z",
     "shell.execute_reply": "2025-08-09T05:28:17.086092Z"
    },
    "papermill": {
     "duration": 0.061662,
     "end_time": "2025-08-09T05:28:17.088475",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.026813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8985507246376812"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import f1_score, roc_auc_score\n",
    "\n",
    "lr_two = LogisticRegression(random_state=42).fit(X_train, y_train)\n",
    "y_pred = lr_two.predict(X_test)\n",
    "f1_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "834000b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.149775Z",
     "iopub.status.busy": "2025-08-09T05:28:17.149395Z",
     "iopub.status.idle": "2025-08-09T05:28:17.159528Z",
     "shell.execute_reply": "2025-08-09T05:28:17.158761Z"
    },
    "papermill": {
     "duration": 0.042794,
     "end_time": "2025-08-09T05:28:17.161201",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.118407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9349206349206349"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob = lr_two.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_pred_prob[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4faffcfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.213384Z",
     "iopub.status.busy": "2025-08-09T05:28:17.213100Z",
     "iopub.status.idle": "2025-08-09T05:28:17.250174Z",
     "shell.execute_reply": "2025-08-09T05:28:17.249424Z"
    },
    "papermill": {
     "duration": 0.060264,
     "end_time": "2025-08-09T05:28:17.252062",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.191798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 133, number of negative: 78\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000052 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 346\n",
      "[LightGBM] [Info] Number of data points in the train set: 211, number of used features: 11\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.630332 -> initscore=0.533640\n",
      "[LightGBM] [Info] Start training from score 0.533640\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9855072463768115"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import lightgbm as lgb \n",
    "\n",
    "lgb_two = lgb.LGBMClassifier(random_state=42).fit(X_train, y_train)\n",
    "y_pred = lgb_two.predict(X_test)\n",
    "f1_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "9954d2e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.288263Z",
     "iopub.status.busy": "2025-08-09T05:28:17.287944Z",
     "iopub.status.idle": "2025-08-09T05:28:17.297815Z",
     "shell.execute_reply": "2025-08-09T05:28:17.297035Z"
    },
    "papermill": {
     "duration": 0.029744,
     "end_time": "2025-08-09T05:28:17.299278",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.269534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob = lgb_two.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_pred_prob[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef607d66",
   "metadata": {
    "papermill": {
     "duration": 0.017124,
     "end_time": "2025-08-09T05:28:17.334047",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.316923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Approach Three: Diabetic Only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "0da06443",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.370557Z",
     "iopub.status.busy": "2025-08-09T05:28:17.370271Z",
     "iopub.status.idle": "2025-08-09T05:28:17.387698Z",
     "shell.execute_reply": "2025-08-09T05:28:17.386807Z"
    },
    "papermill": {
     "duration": 0.037505,
     "end_time": "2025-08-09T05:28:17.389039",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.351534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>2.3</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>36.6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>35.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  AGE  Urea   Cr  HbA1c  Chol   TG  HDL  LDL  VLDL   BMI  Class\n",
       "0         0   50   4.7   46    4.9   4.2  0.9  2.4  1.4   0.5  24.0      0\n",
       "1         1   26   4.5   62    4.9   3.7  1.4  1.1  2.1   0.6  23.0      0\n",
       "2         1   33   7.1   46    4.9   4.9  1.0  0.8  2.0   0.4  21.0      0\n",
       "3         0   45   2.3   24    4.0   2.9  1.0  1.0  1.5   0.4  21.0      0\n",
       "4         0   50   2.0   50    4.0   3.6  1.3  0.9  2.1   0.6  24.0      0\n",
       "..      ...  ...   ...  ...    ...   ...  ...  ...  ...   ...   ...    ...\n",
       "259       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  30.0      2\n",
       "260       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  36.6      2\n",
       "261       1   60  20.8  800    9.0   2.3  1.1  0.9  0.9   0.5  33.0      2\n",
       "262       1   56  20.8  800    9.0   4.6  2.0  1.2  2.5   0.9  35.0      2\n",
       "263       1   58  20.8  800    9.1   6.6  2.9  1.1  4.3   1.3  33.0      2\n",
       "\n",
       "[264 rows x 12 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_three = df.copy()\n",
    "df_three"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "26d5e6fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.428394Z",
     "iopub.status.busy": "2025-08-09T05:28:17.427867Z",
     "iopub.status.idle": "2025-08-09T05:28:17.445985Z",
     "shell.execute_reply": "2025-08-09T05:28:17.445145Z"
    },
    "papermill": {
     "duration": 0.038699,
     "end_time": "2025-08-09T05:28:17.447462",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.408763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>2.3</td>\n",
       "      <td>24</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>50</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>24.0</td>\n",
       "      <td>401</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.7</td>\n",
       "      <td>1.3</td>\n",
       "      <td>36.6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.9</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>20.8</td>\n",
       "      <td>800</td>\n",
       "      <td>9.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  AGE  Urea   Cr  HbA1c  Chol   TG  HDL  LDL  VLDL   BMI  Class\n",
       "0         0   50   4.7   46    4.9   4.2  0.9  2.4  1.4   0.5  24.0      0\n",
       "1         1   26   4.5   62    4.9   3.7  1.4  1.1  2.1   0.6  23.0      0\n",
       "2         1   33   7.1   46    4.9   4.9  1.0  0.8  2.0   0.4  21.0      0\n",
       "3         0   45   2.3   24    4.0   2.9  1.0  1.0  1.5   0.4  21.0      0\n",
       "4         0   50   2.0   50    4.0   3.6  1.3  0.9  2.1   0.6  24.0      0\n",
       "..      ...  ...   ...  ...    ...   ...  ...  ...  ...   ...   ...    ...\n",
       "259       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  30.0      0\n",
       "260       0   61  24.0  401    7.0   4.3  2.9  0.4  2.7   1.3  36.6      0\n",
       "261       1   60  20.8  800    9.0   2.3  1.1  0.9  0.9   0.5  33.0      0\n",
       "262       1   56  20.8  800    9.0   4.6  2.0  1.2  2.5   0.9  35.0      0\n",
       "263       1   58  20.8  800    9.1   6.6  2.9  1.1  4.3   1.3  33.0      0\n",
       "\n",
       "[264 rows x 12 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_three.loc[df_three['Class'] == 2, 'Class'] = 0\n",
    "df_three"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a75c92a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.485329Z",
     "iopub.status.busy": "2025-08-09T05:28:17.484512Z",
     "iopub.status.idle": "2025-08-09T05:28:17.490975Z",
     "shell.execute_reply": "2025-08-09T05:28:17.490238Z"
    },
    "papermill": {
     "duration": 0.026595,
     "end_time": "2025-08-09T05:28:17.492224",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.465629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Class\n",
       "0    224\n",
       "1     40\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_three['Class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8ff9e41e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.531348Z",
     "iopub.status.busy": "2025-08-09T05:28:17.530656Z",
     "iopub.status.idle": "2025-08-09T05:28:17.535590Z",
     "shell.execute_reply": "2025-08-09T05:28:17.534932Z"
    },
    "papermill": {
     "duration": 0.026263,
     "end_time": "2025-08-09T05:28:17.536848",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.510585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_three = df_three.drop(['Class'], axis=1)\n",
    "y_three = df_three['Class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ecdaac3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.574511Z",
     "iopub.status.busy": "2025-08-09T05:28:17.574193Z",
     "iopub.status.idle": "2025-08-09T05:28:17.580932Z",
     "shell.execute_reply": "2025-08-09T05:28:17.580092Z"
    },
    "papermill": {
     "duration": 0.027061,
     "end_time": "2025-08-09T05:28:17.582352",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.555291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_three, y_three, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5ad5bf32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.620705Z",
     "iopub.status.busy": "2025-08-09T05:28:17.620387Z",
     "iopub.status.idle": "2025-08-09T05:28:17.657192Z",
     "shell.execute_reply": "2025-08-09T05:28:17.656229Z"
    },
    "papermill": {
     "duration": 0.058127,
     "end_time": "2025-08-09T05:28:17.659094",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.600967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import f1_score, roc_auc_score\n",
    "\n",
    "lr_three = LogisticRegression(random_state=42).fit(X_train, y_train)\n",
    "y_pred = lr_three.predict(X_test)\n",
    "f1_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c1b76121",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.721887Z",
     "iopub.status.busy": "2025-08-09T05:28:17.721532Z",
     "iopub.status.idle": "2025-08-09T05:28:17.734561Z",
     "shell.execute_reply": "2025-08-09T05:28:17.733952Z"
    },
    "papermill": {
     "duration": 0.046358,
     "end_time": "2025-08-09T05:28:17.736351",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.689993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6611111111111111"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob = lr_three.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_pred_prob[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f20ffdf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.787790Z",
     "iopub.status.busy": "2025-08-09T05:28:17.787444Z",
     "iopub.status.idle": "2025-08-09T05:28:17.826750Z",
     "shell.execute_reply": "2025-08-09T05:28:17.825526Z"
    },
    "papermill": {
     "duration": 0.060776,
     "end_time": "2025-08-09T05:28:17.828544",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.767768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 32, number of negative: 179\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000081 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 346\n",
      "[LightGBM] [Info] Number of data points in the train set: 211, number of used features: 11\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.151659 -> initscore=-1.721650\n",
      "[LightGBM] [Info] Start training from score -1.721650\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9333333333333333"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import lightgbm as lgb \n",
    "\n",
    "lgb_three = lgb.LGBMClassifier(random_state=42).fit(X_train, y_train)\n",
    "y_pred = lgb_three.predict(X_test)\n",
    "f1_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e36a0236",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T05:28:17.869630Z",
     "iopub.status.busy": "2025-08-09T05:28:17.869355Z",
     "iopub.status.idle": "2025-08-09T05:28:17.877859Z",
     "shell.execute_reply": "2025-08-09T05:28:17.877120Z"
    },
    "papermill": {
     "duration": 0.029302,
     "end_time": "2025-08-09T05:28:17.879152",
     "exception": false,
     "start_time": "2025-08-09T05:28:17.849850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob = lgb_three.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_pred_prob[:,1])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7893517,
     "sourceId": 12506498,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 20.887715,
   "end_time": "2025-08-09T05:28:18.919970",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-09T05:27:58.032255",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
